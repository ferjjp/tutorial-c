<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tutorial de C]]></title>
  <link href="http://mgarciaisaia.github.io/tutorial-c/atom.xml" rel="self"/>
  <link href="http://mgarciaisaia.github.io/tutorial-c/"/>
  <updated>2013-08-21T02:03:54-03:00</updated>
  <id>http://mgarciaisaia.github.io/tutorial-c/</id>
  <author>
    <name><![CDATA[Matias Garcia Isaia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Variables]]></title>
    <link href="http://mgarciaisaia.github.io/tutorial-c/blog/2013/08/21/variables/"/>
    <updated>2013-08-21T01:13:00-03:00</updated>
    <id>http://mgarciaisaia.github.io/tutorial-c/blog/2013/08/21/variables</id>
    <content type="html"><![CDATA[<p>Bien. Escribimos, compilamos y corrimos nuestro primer programa. Pero es como bastante aburrido, ¿no? Vamos a ponerle onda: declaremos una variable (¡iupi! (¿?))</p>

<figure class='code'><figcaption><span>ok.c (v2) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">exit_status</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">exit_status</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Guau. Me la jugué :) Anoche no dormí porque me quedé debuggeando un error en este programa.<!--more--></p>

<p>¿Qué cambió? Bueno, entre las llaves hay dos instrucciones ahora. En principio, donde antes decía <code>return 0;</code>, ahora dice <code>return exit_status;</code>.</p>

<p>&ldquo;Así que seguramente <code>exit_status</code> sea una variable mágica de C, como <code>$?</code> en bash&rdquo; Pendorcho. <code>exit_status</code> es una variable, sí. Osea, es un identificador de un <em>cacho&#8217;e memoria</em>. Puedo guardar <em>cosas</em> ahí, y luego leerlas. Pero antes necesito declararla, para decir: a) que existe; y b) qué tipo de cosas va a manejar esa variable. Y eso es lo que hicimos antes: <code>int exit_status = 0;</code>.</p>

<p>Para declarar una variable, especificamos su tipo de dato, seguido por su nombre. En nuestro caso, <code>int exit_status</code> crea una variable de tipo <code>int</code> llamada <code>exit_status</code>. Declaraciones válidas son <code>int hola;</code> o <code>int hola, chau;</code>, por ejemplo: la primera declara una variable <code>hola</code> de tipo <code>int</code>, mientras que la segunda crea <code>hola</code> y <code>chau</code>, dos variables de tipo <code>int</code>, ambas totalmente independientes entre sí.</p>

<p>Pero con declarar la variable no alcanza: si queremos devolverla o leerla, primero tenemos que darle un valor (&ldquo;inicializarla&rdquo;, para los amigos). En C, las asignaciones son del estilo <code>variable = expresion;</code>, donde, en nuestro caso original, <code>expresion</code> es un triste <code>0</code> constante. Y ahí tenemos nuestra primera línea: <code>int exit_status = 0;</code>.</p>

<p>&ldquo;Che, y, entonces, si no es una variable mágica de C, ¿por qué se llama <code>exit_status</code> y no, por ejemplo, <code>a</code>, <code>bleh</code> o <code>code</code>?&rdquo; Bueno, porque nosotros <strong>sí</strong> fuimos a la clase de nombres bonitos y representativos :) Y si esa variable representa nuestro estado de salida, así la llamaremos. Podríamos haberla llamado <code>a</code>, <code>bleh</code>, <code>code</code> o <code>__a256723b</code>, pero preferimos reservarnos los nombres horribles para las PPT :)</p>

<p>Buen, a ver qué hace este programa:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gcc ok.c -o ok
</span><span class='line'><span class="nv">$ </span>./ok
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'>0
</span></code></pre></td></tr></table></div></figure>


<p>Compilamos y ejecutamos, y vemos que sigue sin mostrar nada. Hacemos el <code>echo</code> y vemos nuestro hermoso 0.</p>

<p>&ldquo;Che, para mí que éste nos está chamuyando y el 0 está hardcodeado por ahí&rdquo;</p>

<p>OK, cambiémoslo:</p>

<figure class='code'><figcaption><span>ok.c (v2.1) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">exit_status</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">exit_status</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Y probemos:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./ok
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'>0
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;¡Ajá! ¡Te dije que nos mentía!&rdquo;</p>

<p>¡Momento, cerebrito! No recompilaste, chámpion ;&ndash;)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gcc ok.c -o ok
</span><span class='line'><span class="nv">$ </span>./ok
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'>1
</span></code></pre></td></tr></table></div></figure>


<p><em>¡Touché!</em></p>

<p>&ldquo;OK, ganaste. Ahora, si necesito recompilarpara cambiar el valor de una variable, muy variable no me parece. Y podría cambiar el 0 por un 1 en la primer versión de <code>ok.c</code>, y no tengo que andar haciendo tanta parafernalia. ¿Por qué se llaman <em>variables</em>?&rdquo;</p>

<p>Buen, sí, justamente, porque podés cambiarles el valor durante una misma ejecución del programa. Así como inicializamos <code>exit_status</code> en 0 o en 1, podríamos después de esa incialización <em>asignarle</em> un nuevo valor. Desde que se ejecute esa instrucción en adelante, cada vez que se lea el contenido de la variable obtendremos el nuevo valor, como si nunca hubiera tenido un valor distinto:</p>

<figure class='code'><figcaption><span>ok.c (v2.2) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">exit_status</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">exit_status</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">exit_status</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gcc ok.c -o ok
</span><span class='line'><span class="nv">$ </span>./ok
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'>1
</span></code></pre></td></tr></table></div></figure>


<p><code>=</code> es el operador de asignación. El resultado de evaluar lo que esté a su derecha (ya veremos alternativas, pero por ahora quedémonos con que los números evalúan a sí mismos) se almacena en el espacio de memoria referido a la izquierda.
Y, ¿qué pasó con el 0? Se perdió. El 0 sigue existiendo y valiendo 0, como siempre. Sólo que el contenido de la variable <code>exit_status</code> se sobreescribe con <code>1</code>: la asignación es <em>destructiva</em>.</p>

<p>Sigamos jugando con esto:</p>

<figure class='code'><figcaption><span>ok.c (v2.3) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">exit_status</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a_number</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">exit_status</span> <span class="o">=</span> <span class="n">a_number</span><span class="p">;</span>
</span><span class='line'>  <span class="n">a_number</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">exit_status</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gcc ok.c -o ok
</span><span class='line'><span class="nv">$ </span>./ok
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'>1
</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;¡Eh! ¡¿Qué onda?! Si <code>exit_status</code> es igual a <code>a_number</code>, y a <code>a_number</code> le asigno <code>3</code>, ¿por qué el estado de salida es <code>1</code>?&rdquo;</p>

<p>Bueno, porque te olvidaste lo que dije de la asignación: en lo que está a la izquierda del <code>=</code> guardo el resultado de evaluar lo que está a <em>la otra izquierda</em> del mismo (comunmente conocida como &ldquo;derecha&rdquo;). Y nada más que eso: las variables no se ligan, ni quedan relacionadas, ni nada. Las variables se evalúan a su contenido del momento en que se ejecuta la instrucción, por lo que al hacer <code>exit_status = a_number;</code> estamos diciendo &ldquo;en <code>exit_status</code> guardame lo que <code>a_number</code> valga en ese momento&rdquo;. Como <code>a_number</code> venía valiendo 1, <code>exit_status</code> pasa a valer 1 también. Que después modifiquemos <code>a_number</code> es otra canción, y no tiene ninguna relación con esa asignación que ya se hizo: lo hecho, hecho está, y si al evaluar la variable ésta valía 1, los posibles valores que tenga después no importan, porque ya se realizó la asignación.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arrancando]]></title>
    <link href="http://mgarciaisaia.github.io/tutorial-c/blog/2013/08/21/arrancando/"/>
    <updated>2013-08-21T01:11:00-03:00</updated>
    <id>http://mgarciaisaia.github.io/tutorial-c/blog/2013/08/21/arrancando</id>
    <content type="html"><![CDATA[<p>Vamos a hacer un programa en C, por lo que empezamos con una función:</p>

<figure class='code'><figcaption><span>ok.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Este es (aproximadamente) el programa más chico que podamos hacer en C. <code>main()</code> es la función que se ejecuta al ejecutar un programa C. En este caso, el prototipo de la función es <code>int main(void)</code>: nuestro programa no recibirá parámetros (<code>void</code>), y devolverá a quién lo ejecute un entero signado (<code>int</code>).<!--more--></p>

<p>Nuestro programa tiene una única instrucción: devolver (<code>return</code>) 0, un código de salida que, por convención, indica que el programa ejecutó correctamente.
Compilemos nuestro programa:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gcc ok.c -o ok
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>ok.c ok
</span></code></pre></td></tr></table></div></figure>


<p><code>gcc</code> es el compilador más usado de C. Parte de la GNU Compiler Collection, <code>gcc</code> es el compilador específico de C (el proyecto se llamaba GNU C Compiler, pero cambiaron el nombre por soportar también C++, Java y tantos otros lenguajes). Como casi todo comando en Linux, Unix y derivados, podemos leer su manual haciendo <code>man gcc</code>.</p>

<p><code>gcc</code> recibe como parámetro (entre tantos otros) el archivo fuente a compilar (<code>ok.c</code>), y el parámetro <code>-o NOMBRE</code> indica qué nombre queremos darle al binario resultante (<code>ok</code>). De no indicarlo, <code>gcc</code> elije uno <em>hermoso</em>: <code>a.out</code>.</p>

<p>Ejecutemos:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./ok
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$?</span>
</span><span class='line'>0
</span></code></pre></td></tr></table></div></figure>


<p>Hay un 0, así que debemos estar <em>no-tan-mal</em>, como mínimo. ¿Qué pasó acá?</p>

<p>En UNIX, la forma de ejecutar un programa es escribiendo como orden la ruta completa al mismo y, luego, separados por espacios, todos sus parámetros. Por ejemplo:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/bin/ps --version
</span><span class='line'>procps-ng version 3.3.3
</span></code></pre></td></tr></table></div></figure>


<p>Ejecutamos el programa <code>/bin/ps</code> con el parámetro <code>--version</code>. <code>ps</code> nos contesta la versión que tenemos instalada. En nuestro caso anterior, ejecutamos <code>./ok</code>. <code>.</code> y <code>..</code> son dos enlaces especiales que hay en todo directorio: <code>.</code> enlaza al directorio actual (el propio directorio que contiene a <code>.</code>), y <code>..</code> enlaza al directorio padre del actual (osea, al directorio que contiene al directorio que contiene a <code>..</code>). Entonces, al escribir <code>.</code> ya estamos referenciando toda la ruta al directorio actual. Si estamos ubicados en <code>/home/utnso</code>, <code>.</code> y <code>/home/utnso</code> se refieren al mismo directorio. Agregándole <code>/ok</code> queda <code>./ok</code>, que equivale a <code>/home/utnso/ok</code>, la ruta completa a nuestro programa. Hell yeah, ruta completa => ¡ejecutamos el programa!</p>

<p>&ldquo;Che, pero&hellip; ¡No me mostró nada! ¿Dónde está mi 0?&rdquo;</p>

<p>Bueno, sí, es cierto. No muestra nada porque no le pedimos que muestre nada: nuestro programa sólo devuelve un 0, y nuestra consola sólo ejecuta las instrucciones que le damos. Entonces, pidámosle que muestre el resultado: <code>echo $?</code>.</p>

<p>&ldquo;¡Que te recontra!&rdquo; Bueno, sí. [El amigo Bourne] (<a href="http://en.wikipedia.org/wiki/Stephen_R._Bourne">http://en.wikipedia.org/wiki/Stephen_R._Bourne</a>) había faltado a la clase de nombres descriptivos. <code>echo</code> es un comandode las consolas que imprime en pantalla lo que sea que le pasemos por parámetro. Por ejemplo, <code>echo Hola mundo</code> imprime <code>Hola mundo</code>. <code>bash</code> (el lenguaje que interpreta nuestra consola) posee variables, y para dereferenciarlas (leerlas) hay que anteponerle un <code>$</code> al nombre de la variable. Por ejemplo (<code>#</code> es el caracter de comentario):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ nombre</span> <span class="o">=</span> <span class="s2">&quot;Mundo&quot;</span> <span class="c"># asigno &quot;Mundo&quot; a la variable nombre, creandola si no existe</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$nombre</span> <span class="c"># imprimo el contenido de la variable llamada nombre</span>
</span><span class='line'>Mundo
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;Hola $nombre&quot;</span>
</span><span class='line'>Hola Mundo
</span></code></pre></td></tr></table></div></figure>


<p>En particular, nosotros le habíamos pedido mostrar una variable: <code>$?</code>. <code>?</code> es una variable manejada automáticamente por Bash. Cada vez que ejecuta una instrucción, Bash almacena en <code>?</code> el código de salida del programa ejecutado. Por eso, al pedirle que imprima la variable <code>?</code> (<code>echo $?</code>), Bash nos mostró el 0 que nuestro programa había devuelto.</p>
]]></content>
  </entry>
  
</feed>
